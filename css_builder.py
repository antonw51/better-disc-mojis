import toml
import sys

def generate_css_from_toml(toml_path, css_path):
    # Load the TOML configuration file
    config = toml.load(toml_path)
    
    try:
          base_url = config['setup']['repository']
    except:
        print("Could not find setup.repository in", toml_path, "ensure you have configured a link.")
        return

    with open(css_path, 'w') as css_file:
        # Write boilerplate
        css_file.write(f"""
/**
 * @name FlatMojis
 * @author theblueplum
 * @version 1.0.0
 * @description The default subset of the better-disc-mojis emoji set.
 * @source https://github.com/antonw51/better-disc-mojis
*/

/* Atlas override */
#app-mount button[data-type="emoji"] > div {{
    background-image: url("https://raw.githubusercontent.com/antonw51/better-disc-mojis/main/res/updated_atlas.png") !important;
}}

/* Generated by css_builder.py */
""")

        used_ids = []
        for i in range(0, len(config['emojis'])):
            emoji_name = list(config['emojis'].keys())[i]
            emoji = config['emojis'][emoji_name]['emoji']
            discord_id = config['emojis'][emoji_name]['discord_id']
            if discord_id in used_ids:
                print("Stack:", used_ids)
                print("Duplicate id found:", discord_id)
                return
            used_ids.append(discord_id)

            # Construct the URL to the emoji image
            emoji_url = f"{base_url}/{emoji_name}.svg"

            # Write the CSS rules for Jumboable, Standard, and Reaction cases
            css_file.write(f"""
#app-mount img[src="/assets/{discord_id}.svg"] {{
    width: 0 !important;
    height: 0 !important;
    min-height: 0 !important;
    background: url("{emoji_url}");
    background-size: cover;
}}
""")
            # For suggestions.
            for x in range(0, 14):
                css_file.write(f"""
#app-mount #autocomplete-{x} > div > div > div > img[src="/assets/{discord_id}.svg"] {{
    padding: 10.5px;
}}
                """)

            css_file.write(f"""
#app-mount div[style="flex: 1 1 auto;"] > img.emoji.jumboable:not([class="emoji jumboable"]) {{
    padding-bottom: 48px;
}}

#app-mount div[style="flex: 1 1 auto;"]:has(img.emoji.jumboable[src="/assets/{discord_id}.svg"]:not([class="emoji jumboable"])) > div > div:first-child {{
    display: flex;
}}

#app-mount div[style="flex: 1 1 auto;"]:has(img.emoji.jumboable[src="/assets/{discord_id}.svg"]:not([class="emoji jumboable"])) > div > div:first-child::after {{
    content: "";
    display: block;
    width: 20px;
    padding-bottom: 20px;
    margin-left: 0.2rem;
    background-image: url("https://discord.com/assets/{discord_id}.svg");
    background-size: cover; 
}}

#app-mount img[class="emoji jumboable"][data-name=":{emoji_name}:"] {{
    /*width: 0;
    height: 0;
    min-height: 0;
    background: url("{emoji_url}");*/
    padding: calc(var(--custom-emoji-size-jumbo-emoji) / 2);
}}

#app-mount img[class="emoji"][data-name=":{emoji_name}:"] {{
    /*width: 0;
    height: 0;
    min-height: 0;
    background: url("{emoji_url}");*/
    padding: calc(var(--custom-emoji-size-emoji) / 2);
}}

#app-mount img[class="emoji"][data-name="{emoji}"] {{
    /*width: 0;
    height: 0;
    min-height: 0;
    background: url("{emoji_url}");*/
    padding: 0.5rem; /* 1rem from reaction divided by 2 */
}}
""")
            print(f"CSS rules written for {emoji_name}")

if __name__ == "__main__":
    output_name = 'FlatMojis.theme.css'
    if len(sys.argv) > 1:
        output_name = sys.argv[1]

    # Path to the TOML config file
    toml_path = 'emojis.toml'

    generate_css_from_toml(toml_path, output_name)
